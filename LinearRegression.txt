LinearRegression


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv("data.csv")

# Display the first few rows of the dataset
print("Dataset:")
print(data.head())

# Splitting the data into independent variable (X) and dependent variable (y)
X = data[['x']]
y = data['y']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)

# Creating and training the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions on the testing set
y_pred = model.predict(X_test)

# Model evaluation
print("\nModel Evaluation:")
print("Mean squared error: %.2f" % mean_squared_error(y_test, y_pred))
print("Coefficient of determination (R^2): %.2f" % r2_score(y_test,
                                                            y_pred))

# Assuming you already have trained your model (model.fit(X_train, y_train))

# Define the new, unknown value(s)
new_data = pd.DataFrame({'x': [6]})  # Example: predicting for a new value of X = 6

# Use the trained model to predict the output for the new data
predicted_output = model.predict(new_data)

# Print the predicted output
print("Predicted output:", predicted_output)

# Splitting the data into independent variable (X) and dependent variable (y)
X = data[['x']]
y = data['y']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)

# Creating and training the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Making predictions on the testing set
y_pred = model.predict(X_test)

# Model evaluation
print("\nModel Evaluation:")
print("Mean squared error: %.2f" % mean_squared_error(y_test, y_pred))
print("Coefficient of determination (R^2): %.2f" % r2_score(y_test,
                                                            y_pred))

# Print the coefficients and intercept of the model
print("\nModel Coefficients:")
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Assuming you already have trained your model (model.fit(X_train, y_train))

# Define the new, unknown value(s)
new_data = pd.DataFrame({'x': [6]})  # Example: predicting for a new value of X = 6

# Use the trained model to predict the output for the new data
predicted_output = model.predict(new_data)

# Print the predicted output
print("Predicted output:", predicted_output)