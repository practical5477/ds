# -*- coding: utf-8 -*-
"""Pr 7 Logistic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MYOp1JthkpzHgclsXEaPSvYj6_TEYxpu
"""

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt


# Actual values
y_true = [1, 0, 1, 0, 1, 0, 0, 1, 1, 0]


# Predicted values
y_pred = [1, 0, 1, 1, 1, 0, 0, 1, 0, 0]


# Create confusion matrix
cm = confusion_matrix(y_true, y_pred)


# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', cbar=False,
           xticklabels=['Predicted 0', 'Predicted 1'],
           yticklabels=['Actual 0', 'Actual 1'])
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Actual values
y_true = [1, 0, 1, 0, 1, 0, 0, 1, 1, 0]

# Predicted values
y_pred = [1, 0, 1, 1, 1, 0, 0, 1, 0, 0]

# Create confusion matrix
cm = confusion_matrix(y_true, y_pred)

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', cbar=False,
           xticklabels=['Predicted 0', 'Predicted 1'],
           yticklabels=['Actual 0', 'Actual 1'])
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.title('Confusion Matrix')
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score, classification_report

# Load the CSV file into a DataFrame
df = pd.read_csv('Ldata.csv')

# Separate the independent variable (X) and the target variable (y)
X = df[['x']]
y = df['y']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the logistic regression model
model = LogisticRegression()

# Fit the model to the training data
model.fit(X_train, y_train)

# Predict the classes for the testing set
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Prepare new data (replace X_new with your new data)
X_new = pd.DataFrame({'x': [1.5, 2.8, 4.2]})

# Predict the classes for the new data
y_pred_new = model.predict(X_new)

# Print the predicted classes
print("Predicted classes for new data:", y_pred_new)


# Predict the target variable for the test set
y_pred = model.predict(X_test)

# Calculate classification metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Display the metrics
print(f"Model Performance Metrics:")
print(f"Accuracy:  {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall:    {recall:.2f}")
print(f"F1-Score:  {f1:.2f}")

# Full classification report
print("\nClassification Report:\n")
print(classification_report(y_test, y_pred, target_names=['No Disease', 'Disease']))

from google.colab import drive
drive.mount('/content/drive')

